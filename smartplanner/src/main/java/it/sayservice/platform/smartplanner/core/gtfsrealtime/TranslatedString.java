/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class TranslatedString implements Externalizable, Message<TranslatedString>, Schema<TranslatedString>
{
    @Generated("java_bean")
    public static final class Translation implements Externalizable, Message<Translation>, Schema<Translation>
    {

        public static Schema<Translation> getSchema()
        {
            return DEFAULT_INSTANCE;
        }

        public static Translation getDefaultInstance()
        {
            return DEFAULT_INSTANCE;
        }

        static final Translation DEFAULT_INSTANCE = new Translation();

        
        private String text;
        private String language;

        public Translation()
        {

        }

        public Translation(
            String text
        )
        {
            this.text = text;
        }

        // getters and setters

        // text

        public String getText()
        {
            return text;
        }


        public void setText(String text)
        {
            this.text = text;
        }

        // language

        public String getLanguage()
        {
            return language;
        }


        public void setLanguage(String language)
        {
            this.language = language;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || this.getClass() != obj.getClass()) {
                return false;
            }
            final Translation that = (Translation) obj;
            return
                    Objects.equals(this.text, that.text) &&
                    Objects.equals(this.language, that.language);
        }

        @Override
        public int hashCode() {
            return Objects.hash(text, language);
        }

        @Override
        public String toString() {
            return "Translation{" +
                        "text=" + text +
                        ", language=" + language +
                    '}';
        }
        // java serialization

        public void readExternal(ObjectInput in) throws IOException
        {
            GraphIOUtil.mergeDelimitedFrom(in, this, this);
        }

        public void writeExternal(ObjectOutput out) throws IOException
        {
            GraphIOUtil.writeDelimitedTo(out, this, this);
        }

        // message method

        public Schema<Translation> cachedSchema()
        {
            return DEFAULT_INSTANCE;
        }

        // schema methods

        public Translation newMessage()
        {
            return new Translation();
        }

        public Class<Translation> typeClass()
        {
            return Translation.class;
        }

        public String messageName()
        {
            return Translation.class.getSimpleName();
        }

        public String messageFullName()
        {
            return Translation.class.getName();
        }

        public boolean isInitialized(Translation message)
        {
            return 
                message.text != null;
        }

        public void mergeFrom(Input input, Translation message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.text = input.readString();
                        break;
                    case 2:
                        message.language = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Translation message) throws IOException
        {
            if(message.text == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.text, false);

            if(message.language != null)
                output.writeString(2, message.language, false);
        }

        public String getFieldName(int number)
        {
            return Integer.toString(number);
        }

        public int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }
        

    }


    public static Schema<TranslatedString> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TranslatedString getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TranslatedString DEFAULT_INSTANCE = new TranslatedString();

    
    private List<Translation> translation;

    public TranslatedString()
    {

    }

    // getters and setters

    // translation

    public List<Translation> getTranslationList()
    {
        return translation;
    }


    public void setTranslationList(List<Translation> translation)
    {
        this.translation = translation;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final TranslatedString that = (TranslatedString) obj;
        return
                Objects.equals(this.translation, that.translation);
    }

    @Override
    public int hashCode() {
        return Objects.hash(translation);
    }

    @Override
    public String toString() {
        return "TranslatedString{" +
                    "translation=" + translation +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TranslatedString> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TranslatedString newMessage()
    {
        return new TranslatedString();
    }

    public Class<TranslatedString> typeClass()
    {
        return TranslatedString.class;
    }

    public String messageName()
    {
        return TranslatedString.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TranslatedString.class.getName();
    }

    public boolean isInitialized(TranslatedString message)
    {
        return true;
    }

    public void mergeFrom(Input input, TranslatedString message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.translation == null)
                        message.translation = new ArrayList<Translation>();
                    message.translation.add(input.mergeObject(null, Translation.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, TranslatedString message) throws IOException
    {
        if(message.translation != null)
        {
            for(Translation translation : message.translation)
            {
                if(translation != null)
                    output.writeObject(1, translation, Translation.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
