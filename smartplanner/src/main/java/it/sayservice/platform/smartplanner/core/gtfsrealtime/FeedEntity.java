/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class FeedEntity implements Externalizable, Message<FeedEntity>, Schema<FeedEntity>
{

    public static Schema<FeedEntity> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static FeedEntity getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FeedEntity DEFAULT_INSTANCE = new FeedEntity();

    static final Boolean DEFAULT_IS_DELETED = new Boolean(false);
    
    private String id;
    private Boolean isDeleted = DEFAULT_IS_DELETED;
    private TripUpdate tripUpdate;
    private VehiclePosition vehicle;
    private Alert alert;

    public FeedEntity()
    {

    }

    public FeedEntity(
        String id
    )
    {
        this.id = id;
    }

    // getters and setters

    // id

    public String getId()
    {
        return id;
    }


    public void setId(String id)
    {
        this.id = id;
    }

    // isDeleted

    public Boolean getIsDeleted()
    {
        return isDeleted;
    }


    public void setIsDeleted(Boolean isDeleted)
    {
        this.isDeleted = isDeleted;
    }

    // tripUpdate

    public TripUpdate getTripUpdate()
    {
        return tripUpdate;
    }


    public void setTripUpdate(TripUpdate tripUpdate)
    {
        this.tripUpdate = tripUpdate;
    }

    // vehicle

    public VehiclePosition getVehicle()
    {
        return vehicle;
    }


    public void setVehicle(VehiclePosition vehicle)
    {
        this.vehicle = vehicle;
    }

    // alert

    public Alert getAlert()
    {
        return alert;
    }


    public void setAlert(Alert alert)
    {
        this.alert = alert;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final FeedEntity that = (FeedEntity) obj;
        return
                Objects.equals(this.id, that.id) &&
                Objects.equals(this.isDeleted, that.isDeleted) &&
                Objects.equals(this.tripUpdate, that.tripUpdate) &&
                Objects.equals(this.vehicle, that.vehicle) &&
                Objects.equals(this.alert, that.alert);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, isDeleted, tripUpdate, vehicle, alert);
    }

    @Override
    public String toString() {
        return "FeedEntity{" +
                    "id=" + id +
                    ", isDeleted=" + isDeleted +
                    ", tripUpdate=" + tripUpdate +
                    ", vehicle=" + vehicle +
                    ", alert=" + alert +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<FeedEntity> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public FeedEntity newMessage()
    {
        return new FeedEntity();
    }

    public Class<FeedEntity> typeClass()
    {
        return FeedEntity.class;
    }

    public String messageName()
    {
        return FeedEntity.class.getSimpleName();
    }

    public String messageFullName()
    {
        return FeedEntity.class.getName();
    }

    public boolean isInitialized(FeedEntity message)
    {
        return 
            message.id != null;
    }

    public void mergeFrom(Input input, FeedEntity message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.id = input.readString();
                    break;
                case 2:
                    message.isDeleted = input.readBool();
                    break;
                case 3:
                    message.tripUpdate = input.mergeObject(message.tripUpdate, TripUpdate.getSchema());
                    break;

                case 4:
                    message.vehicle = input.mergeObject(message.vehicle, VehiclePosition.getSchema());
                    break;

                case 5:
                    message.alert = input.mergeObject(message.alert, Alert.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, FeedEntity message) throws IOException
    {
        if(message.id == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.id, false);

        if(message.isDeleted != null && message.isDeleted != DEFAULT_IS_DELETED)
            output.writeBool(2, message.isDeleted, false);

        if(message.tripUpdate != null)
             output.writeObject(3, message.tripUpdate, TripUpdate.getSchema(), false);


        if(message.vehicle != null)
             output.writeObject(4, message.vehicle, VehiclePosition.getSchema(), false);


        if(message.alert != null)
             output.writeObject(5, message.alert, Alert.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
