/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class TripUpdate implements Externalizable, Message<TripUpdate>, Schema<TripUpdate>
{
    @Generated("java_bean")
    public static final class StopTimeEvent implements Externalizable, Message<StopTimeEvent>, Schema<StopTimeEvent>
    {

        public static Schema<StopTimeEvent> getSchema()
        {
            return DEFAULT_INSTANCE;
        }

        public static StopTimeEvent getDefaultInstance()
        {
            return DEFAULT_INSTANCE;
        }

        static final StopTimeEvent DEFAULT_INSTANCE = new StopTimeEvent();

        
        private Integer delay;
        private Long time;
        private Integer uncertainty;

        public StopTimeEvent()
        {

        }

        // getters and setters

        // delay

        public Integer getDelay()
        {
            return delay;
        }


        public void setDelay(Integer delay)
        {
            this.delay = delay;
        }

        // time

        public Long getTime()
        {
            return time;
        }


        public void setTime(Long time)
        {
            this.time = time;
        }

        // uncertainty

        public Integer getUncertainty()
        {
            return uncertainty;
        }


        public void setUncertainty(Integer uncertainty)
        {
            this.uncertainty = uncertainty;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || this.getClass() != obj.getClass()) {
                return false;
            }
            final StopTimeEvent that = (StopTimeEvent) obj;
            return
                    Objects.equals(this.delay, that.delay) &&
                    Objects.equals(this.time, that.time) &&
                    Objects.equals(this.uncertainty, that.uncertainty);
        }

        @Override
        public int hashCode() {
            return Objects.hash(delay, time, uncertainty);
        }

        @Override
        public String toString() {
            return "StopTimeEvent{" +
                        "delay=" + delay +
                        ", time=" + time +
                        ", uncertainty=" + uncertainty +
                    '}';
        }
        // java serialization

        public void readExternal(ObjectInput in) throws IOException
        {
            GraphIOUtil.mergeDelimitedFrom(in, this, this);
        }

        public void writeExternal(ObjectOutput out) throws IOException
        {
            GraphIOUtil.writeDelimitedTo(out, this, this);
        }

        // message method

        public Schema<StopTimeEvent> cachedSchema()
        {
            return DEFAULT_INSTANCE;
        }

        // schema methods

        public StopTimeEvent newMessage()
        {
            return new StopTimeEvent();
        }

        public Class<StopTimeEvent> typeClass()
        {
            return StopTimeEvent.class;
        }

        public String messageName()
        {
            return StopTimeEvent.class.getSimpleName();
        }

        public String messageFullName()
        {
            return StopTimeEvent.class.getName();
        }

        public boolean isInitialized(StopTimeEvent message)
        {
            return true;
        }

        public void mergeFrom(Input input, StopTimeEvent message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.delay = input.readInt32();
                        break;
                    case 2:
                        message.time = input.readInt64();
                        break;
                    case 3:
                        message.uncertainty = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, StopTimeEvent message) throws IOException
        {
            if(message.delay != null)
                output.writeInt32(1, message.delay, false);

            if(message.time != null)
                output.writeInt64(2, message.time, false);

            if(message.uncertainty != null)
                output.writeInt32(3, message.uncertainty, false);
        }

        public String getFieldName(int number)
        {
            return Integer.toString(number);
        }

        public int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }
        

    }
    @Generated("java_bean")
    public static final class StopTimeUpdate implements Externalizable, Message<StopTimeUpdate>, Schema<StopTimeUpdate>
    {
        @Generated("java_bean")
        public enum ScheduleRelationship implements io.protostuff.EnumLite<ScheduleRelationship>
        {
            SCHEDULED(0),
            SKIPPED(1),
            NO_DATA(2);
            
            public final int number;
            
            private ScheduleRelationship (int number)
            {
                this.number = number;
            }
            
            public int getNumber()
            {
                return number;
            }
            
            public static ScheduleRelationship valueOf(int number)
            {
                switch(number) 
                {
                    case 0: return SCHEDULED;
                    case 1: return SKIPPED;
                    case 2: return NO_DATA;
                    default: return null;
                }
            }
        }


        public static Schema<StopTimeUpdate> getSchema()
        {
            return DEFAULT_INSTANCE;
        }

        public static StopTimeUpdate getDefaultInstance()
        {
            return DEFAULT_INSTANCE;
        }

        static final StopTimeUpdate DEFAULT_INSTANCE = new StopTimeUpdate();

        static final ScheduleRelationship DEFAULT_SCHEDULE_RELATIONSHIP = ScheduleRelationship.SCHEDULED;
        
        private Integer stopSequence;
        private TripUpdate.StopTimeEvent arrival;
        private TripUpdate.StopTimeEvent departure;
        private String stopId;
        private ScheduleRelationship scheduleRelationship = DEFAULT_SCHEDULE_RELATIONSHIP;

        public StopTimeUpdate()
        {

        }

        // getters and setters

        // stopSequence

        public Integer getStopSequence()
        {
            return stopSequence;
        }


        public void setStopSequence(Integer stopSequence)
        {
            this.stopSequence = stopSequence;
        }

        // arrival

        public TripUpdate.StopTimeEvent getArrival()
        {
            return arrival;
        }


        public void setArrival(TripUpdate.StopTimeEvent arrival)
        {
            this.arrival = arrival;
        }

        // departure

        public TripUpdate.StopTimeEvent getDeparture()
        {
            return departure;
        }


        public void setDeparture(TripUpdate.StopTimeEvent departure)
        {
            this.departure = departure;
        }

        // stopId

        public String getStopId()
        {
            return stopId;
        }


        public void setStopId(String stopId)
        {
            this.stopId = stopId;
        }

        // scheduleRelationship

        public ScheduleRelationship getScheduleRelationship()
        {
            return scheduleRelationship;
        }


        public void setScheduleRelationship(ScheduleRelationship scheduleRelationship)
        {
            this.scheduleRelationship = scheduleRelationship;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || this.getClass() != obj.getClass()) {
                return false;
            }
            final StopTimeUpdate that = (StopTimeUpdate) obj;
            return
                    Objects.equals(this.stopSequence, that.stopSequence) &&
                    Objects.equals(this.arrival, that.arrival) &&
                    Objects.equals(this.departure, that.departure) &&
                    Objects.equals(this.stopId, that.stopId) &&
                    Objects.equals(this.scheduleRelationship, that.scheduleRelationship);
        }

        @Override
        public int hashCode() {
            return Objects.hash(stopSequence, arrival, departure, stopId, scheduleRelationship);
        }

        @Override
        public String toString() {
            return "StopTimeUpdate{" +
                        "stopSequence=" + stopSequence +
                        ", arrival=" + arrival +
                        ", departure=" + departure +
                        ", stopId=" + stopId +
                        ", scheduleRelationship=" + scheduleRelationship +
                    '}';
        }
        // java serialization

        public void readExternal(ObjectInput in) throws IOException
        {
            GraphIOUtil.mergeDelimitedFrom(in, this, this);
        }

        public void writeExternal(ObjectOutput out) throws IOException
        {
            GraphIOUtil.writeDelimitedTo(out, this, this);
        }

        // message method

        public Schema<StopTimeUpdate> cachedSchema()
        {
            return DEFAULT_INSTANCE;
        }

        // schema methods

        public StopTimeUpdate newMessage()
        {
            return new StopTimeUpdate();
        }

        public Class<StopTimeUpdate> typeClass()
        {
            return StopTimeUpdate.class;
        }

        public String messageName()
        {
            return StopTimeUpdate.class.getSimpleName();
        }

        public String messageFullName()
        {
            return StopTimeUpdate.class.getName();
        }

        public boolean isInitialized(StopTimeUpdate message)
        {
            return true;
        }

        public void mergeFrom(Input input, StopTimeUpdate message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.stopSequence = input.readUInt32();
                        break;
                    case 2:
                        message.arrival = input.mergeObject(message.arrival, TripUpdate.StopTimeEvent.getSchema());
                        break;

                    case 3:
                        message.departure = input.mergeObject(message.departure, TripUpdate.StopTimeEvent.getSchema());
                        break;

                    case 4:
                        message.stopId = input.readString();
                        break;
                    case 5:
                        message.scheduleRelationship = ScheduleRelationship.valueOf(input.readEnum());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, StopTimeUpdate message) throws IOException
        {
            if(message.stopSequence != null)
                output.writeUInt32(1, message.stopSequence, false);

            if(message.arrival != null)
                 output.writeObject(2, message.arrival, TripUpdate.StopTimeEvent.getSchema(), false);


            if(message.departure != null)
                 output.writeObject(3, message.departure, TripUpdate.StopTimeEvent.getSchema(), false);


            if(message.stopId != null)
                output.writeString(4, message.stopId, false);

            if(message.scheduleRelationship != null && message.scheduleRelationship != DEFAULT_SCHEDULE_RELATIONSHIP)
                 output.writeEnum(5, message.scheduleRelationship.number, false);
        }

        public String getFieldName(int number)
        {
            return Integer.toString(number);
        }

        public int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }
        

    }


    public static Schema<TripUpdate> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TripUpdate getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TripUpdate DEFAULT_INSTANCE = new TripUpdate();

    
    private TripDescriptor trip;
    private List<StopTimeUpdate> stopTimeUpdate;
    private VehicleDescriptor vehicle;
    private Long timestamp;
    private Integer delay;

    public TripUpdate()
    {

    }

    public TripUpdate(
        TripDescriptor trip
    )
    {
        this.trip = trip;
    }

    // getters and setters

    // trip

    public TripDescriptor getTrip()
    {
        return trip;
    }


    public void setTrip(TripDescriptor trip)
    {
        this.trip = trip;
    }

    // stopTimeUpdate

    public List<StopTimeUpdate> getStopTimeUpdateList()
    {
        return stopTimeUpdate;
    }


    public void setStopTimeUpdateList(List<StopTimeUpdate> stopTimeUpdate)
    {
        this.stopTimeUpdate = stopTimeUpdate;
    }

    // vehicle

    public VehicleDescriptor getVehicle()
    {
        return vehicle;
    }


    public void setVehicle(VehicleDescriptor vehicle)
    {
        this.vehicle = vehicle;
    }

    // timestamp

    public Long getTimestamp()
    {
        return timestamp;
    }


    public void setTimestamp(Long timestamp)
    {
        this.timestamp = timestamp;
    }

    // delay

    public Integer getDelay()
    {
        return delay;
    }


    public void setDelay(Integer delay)
    {
        this.delay = delay;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final TripUpdate that = (TripUpdate) obj;
        return
                Objects.equals(this.trip, that.trip) &&
                Objects.equals(this.stopTimeUpdate, that.stopTimeUpdate) &&
                Objects.equals(this.vehicle, that.vehicle) &&
                Objects.equals(this.timestamp, that.timestamp) &&
                Objects.equals(this.delay, that.delay);
    }

    @Override
    public int hashCode() {
        return Objects.hash(trip, stopTimeUpdate, vehicle, timestamp, delay);
    }

    @Override
    public String toString() {
        return "TripUpdate{" +
                    "trip=" + trip +
                    ", stopTimeUpdate=" + stopTimeUpdate +
                    ", vehicle=" + vehicle +
                    ", timestamp=" + timestamp +
                    ", delay=" + delay +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TripUpdate> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TripUpdate newMessage()
    {
        return new TripUpdate();
    }

    public Class<TripUpdate> typeClass()
    {
        return TripUpdate.class;
    }

    public String messageName()
    {
        return TripUpdate.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TripUpdate.class.getName();
    }

    public boolean isInitialized(TripUpdate message)
    {
        return 
            message.trip != null;
    }

    public void mergeFrom(Input input, TripUpdate message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.trip = input.mergeObject(message.trip, TripDescriptor.getSchema());
                    break;

                case 2:
                    if(message.stopTimeUpdate == null)
                        message.stopTimeUpdate = new ArrayList<StopTimeUpdate>();
                    message.stopTimeUpdate.add(input.mergeObject(null, StopTimeUpdate.getSchema()));
                    break;

                case 3:
                    message.vehicle = input.mergeObject(message.vehicle, VehicleDescriptor.getSchema());
                    break;

                case 4:
                    message.timestamp = input.readUInt64();
                    break;
                case 5:
                    message.delay = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, TripUpdate message) throws IOException
    {
        if(message.trip == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.trip, TripDescriptor.getSchema(), false);


        if(message.stopTimeUpdate != null)
        {
            for(StopTimeUpdate stopTimeUpdate : message.stopTimeUpdate)
            {
                if(stopTimeUpdate != null)
                    output.writeObject(2, stopTimeUpdate, StopTimeUpdate.getSchema(), true);
            }
        }


        if(message.vehicle != null)
             output.writeObject(3, message.vehicle, VehicleDescriptor.getSchema(), false);


        if(message.timestamp != null)
            output.writeUInt64(4, message.timestamp, false);

        if(message.delay != null)
            output.writeInt32(5, message.delay, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
