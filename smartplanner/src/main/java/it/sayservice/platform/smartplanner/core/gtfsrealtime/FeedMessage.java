/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class FeedMessage implements Externalizable, Message<FeedMessage>, Schema<FeedMessage>
{

    public static Schema<FeedMessage> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static FeedMessage getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FeedMessage DEFAULT_INSTANCE = new FeedMessage();

    
    private FeedHeader header;
    private List<FeedEntity> entity;

    public FeedMessage()
    {

    }

    public FeedMessage(
        FeedHeader header
    )
    {
        this.header = header;
    }

    // getters and setters

    // header

    public FeedHeader getHeader()
    {
        return header;
    }


    public void setHeader(FeedHeader header)
    {
        this.header = header;
    }

    // entity

    public List<FeedEntity> getEntityList()
    {
        return entity;
    }


    public void setEntityList(List<FeedEntity> entity)
    {
        this.entity = entity;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final FeedMessage that = (FeedMessage) obj;
        return
                Objects.equals(this.header, that.header) &&
                Objects.equals(this.entity, that.entity);
    }

    @Override
    public int hashCode() {
        return Objects.hash(header, entity);
    }

    @Override
    public String toString() {
        return "FeedMessage{" +
                    "header=" + header +
                    ", entity=" + entity +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<FeedMessage> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public FeedMessage newMessage()
    {
        return new FeedMessage();
    }

    public Class<FeedMessage> typeClass()
    {
        return FeedMessage.class;
    }

    public String messageName()
    {
        return FeedMessage.class.getSimpleName();
    }

    public String messageFullName()
    {
        return FeedMessage.class.getName();
    }

    public boolean isInitialized(FeedMessage message)
    {
        return 
            message.header != null;
    }

    public void mergeFrom(Input input, FeedMessage message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.header = input.mergeObject(message.header, FeedHeader.getSchema());
                    break;

                case 2:
                    if(message.entity == null)
                        message.entity = new ArrayList<FeedEntity>();
                    message.entity.add(input.mergeObject(null, FeedEntity.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, FeedMessage message) throws IOException
    {
        if(message.header == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.header, FeedHeader.getSchema(), false);


        if(message.entity != null)
        {
            for(FeedEntity entity : message.entity)
            {
                if(entity != null)
                    output.writeObject(2, entity, FeedEntity.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
