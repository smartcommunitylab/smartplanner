/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;


@Generated("java_bean")
public final class Alert implements Externalizable, Message<Alert>, Schema<Alert>
{
    @Generated("java_bean")
    public enum Cause implements io.protostuff.EnumLite<Cause>
    {
        UNKNOWN_CAUSE(1),
        OTHER_CAUSE(2),
        TECHNICAL_PROBLEM(3),
        STRIKE(4),
        DEMONSTRATION(5),
        ACCIDENT(6),
        HOLIDAY(7),
        WEATHER(8),
        MAINTENANCE(9),
        CONSTRUCTION(10),
        POLICE_ACTIVITY(11),
        MEDICAL_EMERGENCY(12);
        
        public final int number;
        
        private Cause (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Cause valueOf(int number)
        {
            switch(number) 
            {
                case 1: return UNKNOWN_CAUSE;
                case 2: return OTHER_CAUSE;
                case 3: return TECHNICAL_PROBLEM;
                case 4: return STRIKE;
                case 5: return DEMONSTRATION;
                case 6: return ACCIDENT;
                case 7: return HOLIDAY;
                case 8: return WEATHER;
                case 9: return MAINTENANCE;
                case 10: return CONSTRUCTION;
                case 11: return POLICE_ACTIVITY;
                case 12: return MEDICAL_EMERGENCY;
                default: return null;
            }
        }
    }
    @Generated("java_bean")
    public enum Effect implements io.protostuff.EnumLite<Effect>
    {
        NO_SERVICE(1),
        REDUCED_SERVICE(2),
        SIGNIFICANT_DELAYS(3),
        DETOUR(4),
        ADDITIONAL_SERVICE(5),
        MODIFIED_SERVICE(6),
        OTHER_EFFECT(7),
        UNKNOWN_EFFECT(8),
        STOP_MOVED(9);
        
        public final int number;
        
        private Effect (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Effect valueOf(int number)
        {
            switch(number) 
            {
                case 1: return NO_SERVICE;
                case 2: return REDUCED_SERVICE;
                case 3: return SIGNIFICANT_DELAYS;
                case 4: return DETOUR;
                case 5: return ADDITIONAL_SERVICE;
                case 6: return MODIFIED_SERVICE;
                case 7: return OTHER_EFFECT;
                case 8: return UNKNOWN_EFFECT;
                case 9: return STOP_MOVED;
                default: return null;
            }
        }
    }


    public static Schema<Alert> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Alert getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Alert DEFAULT_INSTANCE = new Alert();

    static final Cause DEFAULT_CAUSE = Cause.UNKNOWN_CAUSE;
    static final Effect DEFAULT_EFFECT = Effect.UNKNOWN_EFFECT;
    
    private List<TimeRange> activePeriod;
    private List<EntitySelector> informedEntity;
    private Cause cause = DEFAULT_CAUSE;
    private Effect effect = DEFAULT_EFFECT;
    private TranslatedString url;
    private TranslatedString headerText;
    private TranslatedString descriptionText;

    public Alert()
    {

    }

    // getters and setters

    // activePeriod

    public List<TimeRange> getActivePeriodList()
    {
        return activePeriod;
    }


    public void setActivePeriodList(List<TimeRange> activePeriod)
    {
        this.activePeriod = activePeriod;
    }

    // informedEntity

    public List<EntitySelector> getInformedEntityList()
    {
        return informedEntity;
    }


    public void setInformedEntityList(List<EntitySelector> informedEntity)
    {
        this.informedEntity = informedEntity;
    }

    // cause

    public Cause getCause()
    {
        return cause;
    }


    public void setCause(Cause cause)
    {
        this.cause = cause;
    }

    // effect

    public Effect getEffect()
    {
        return effect;
    }


    public void setEffect(Effect effect)
    {
        this.effect = effect;
    }

    // url

    public TranslatedString getUrl()
    {
        return url;
    }


    public void setUrl(TranslatedString url)
    {
        this.url = url;
    }

    // headerText

    public TranslatedString getHeaderText()
    {
        return headerText;
    }


    public void setHeaderText(TranslatedString headerText)
    {
        this.headerText = headerText;
    }

    // descriptionText

    public TranslatedString getDescriptionText()
    {
        return descriptionText;
    }


    public void setDescriptionText(TranslatedString descriptionText)
    {
        this.descriptionText = descriptionText;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final Alert that = (Alert) obj;
        return
                Objects.equals(this.activePeriod, that.activePeriod) &&
                Objects.equals(this.informedEntity, that.informedEntity) &&
                Objects.equals(this.cause, that.cause) &&
                Objects.equals(this.effect, that.effect) &&
                Objects.equals(this.url, that.url) &&
                Objects.equals(this.headerText, that.headerText) &&
                Objects.equals(this.descriptionText, that.descriptionText);
    }

    @Override
    public int hashCode() {
        return Objects.hash(activePeriod, informedEntity, cause, effect, url, headerText, descriptionText);
    }

    @Override
    public String toString() {
        return "Alert{" +
                    "activePeriod=" + activePeriod +
                    ", informedEntity=" + informedEntity +
                    ", cause=" + cause +
                    ", effect=" + effect +
                    ", url=" + url +
                    ", headerText=" + headerText +
                    ", descriptionText=" + descriptionText +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Alert> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Alert newMessage()
    {
        return new Alert();
    }

    public Class<Alert> typeClass()
    {
        return Alert.class;
    }

    public String messageName()
    {
        return Alert.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Alert.class.getName();
    }

    public boolean isInitialized(Alert message)
    {
        return true;
    }

    public void mergeFrom(Input input, Alert message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.activePeriod == null)
                        message.activePeriod = new ArrayList<TimeRange>();
                    message.activePeriod.add(input.mergeObject(null, TimeRange.getSchema()));
                    break;

                case 5:
                    if(message.informedEntity == null)
                        message.informedEntity = new ArrayList<EntitySelector>();
                    message.informedEntity.add(input.mergeObject(null, EntitySelector.getSchema()));
                    break;

                case 6:
                    message.cause = Cause.valueOf(input.readEnum());
                    break;

                case 7:
                    message.effect = Effect.valueOf(input.readEnum());
                    break;

                case 8:
                    message.url = input.mergeObject(message.url, TranslatedString.getSchema());
                    break;

                case 10:
                    message.headerText = input.mergeObject(message.headerText, TranslatedString.getSchema());
                    break;

                case 11:
                    message.descriptionText = input.mergeObject(message.descriptionText, TranslatedString.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Alert message) throws IOException
    {
        if(message.activePeriod != null)
        {
            for(TimeRange activePeriod : message.activePeriod)
            {
                if(activePeriod != null)
                    output.writeObject(1, activePeriod, TimeRange.getSchema(), true);
            }
        }


        if(message.informedEntity != null)
        {
            for(EntitySelector informedEntity : message.informedEntity)
            {
                if(informedEntity != null)
                    output.writeObject(5, informedEntity, EntitySelector.getSchema(), true);
            }
        }


        if(message.cause != null && message.cause != DEFAULT_CAUSE)
             output.writeEnum(6, message.cause.number, false);

        if(message.effect != null && message.effect != DEFAULT_EFFECT)
             output.writeEnum(7, message.effect.number, false);

        if(message.url != null)
             output.writeObject(8, message.url, TranslatedString.getSchema(), false);


        if(message.headerText != null)
             output.writeObject(10, message.headerText, TranslatedString.getSchema(), false);


        if(message.descriptionText != null)
             output.writeObject(11, message.descriptionText, TranslatedString.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
