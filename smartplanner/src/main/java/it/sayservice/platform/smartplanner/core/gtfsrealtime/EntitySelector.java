/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;


@Generated("java_bean")
public final class EntitySelector implements Externalizable, Message<EntitySelector>, Schema<EntitySelector>
{

    public static Schema<EntitySelector> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static EntitySelector getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final EntitySelector DEFAULT_INSTANCE = new EntitySelector();

    
    private String agencyId;
    private String routeId;
    private Integer routeType;
    private TripDescriptor trip;
    private String stopId;

    public EntitySelector()
    {

    }

    // getters and setters

    // agencyId

    public String getAgencyId()
    {
        return agencyId;
    }


    public void setAgencyId(String agencyId)
    {
        this.agencyId = agencyId;
    }

    // routeId

    public String getRouteId()
    {
        return routeId;
    }


    public void setRouteId(String routeId)
    {
        this.routeId = routeId;
    }

    // routeType

    public Integer getRouteType()
    {
        return routeType;
    }


    public void setRouteType(Integer routeType)
    {
        this.routeType = routeType;
    }

    // trip

    public TripDescriptor getTrip()
    {
        return trip;
    }


    public void setTrip(TripDescriptor trip)
    {
        this.trip = trip;
    }

    // stopId

    public String getStopId()
    {
        return stopId;
    }


    public void setStopId(String stopId)
    {
        this.stopId = stopId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final EntitySelector that = (EntitySelector) obj;
        return
                Objects.equals(this.agencyId, that.agencyId) &&
                Objects.equals(this.routeId, that.routeId) &&
                Objects.equals(this.routeType, that.routeType) &&
                Objects.equals(this.trip, that.trip) &&
                Objects.equals(this.stopId, that.stopId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(agencyId, routeId, routeType, trip, stopId);
    }

    @Override
    public String toString() {
        return "EntitySelector{" +
                    "agencyId=" + agencyId +
                    ", routeId=" + routeId +
                    ", routeType=" + routeType +
                    ", trip=" + trip +
                    ", stopId=" + stopId +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<EntitySelector> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public EntitySelector newMessage()
    {
        return new EntitySelector();
    }

    public Class<EntitySelector> typeClass()
    {
        return EntitySelector.class;
    }

    public String messageName()
    {
        return EntitySelector.class.getSimpleName();
    }

    public String messageFullName()
    {
        return EntitySelector.class.getName();
    }

    public boolean isInitialized(EntitySelector message)
    {
        return true;
    }

    public void mergeFrom(Input input, EntitySelector message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.agencyId = input.readString();
                    break;
                case 2:
                    message.routeId = input.readString();
                    break;
                case 3:
                    message.routeType = input.readInt32();
                    break;
                case 4:
                    message.trip = input.mergeObject(message.trip, TripDescriptor.getSchema());
                    break;

                case 5:
                    message.stopId = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, EntitySelector message) throws IOException
    {
        if(message.agencyId != null)
            output.writeString(1, message.agencyId, false);

        if(message.routeId != null)
            output.writeString(2, message.routeId, false);

        if(message.routeType != null)
            output.writeInt32(3, message.routeType, false);

        if(message.trip != null)
             output.writeObject(4, message.trip, TripDescriptor.getSchema(), false);


        if(message.stopId != null)
            output.writeString(5, message.stopId, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
