/**
 * Copyright 2011-2016 SAYservice s.r.l.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package it.sayservice.platform.smartplanner.core.gtfsrealtime;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class Position implements Externalizable, Message<Position>, Schema<Position>
{

    public static Schema<Position> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Position getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Position DEFAULT_INSTANCE = new Position();

    
    private Float latitude;
    private Float longitude;
    private Float bearing;
    private Double odometer;
    private Float speed;

    public Position()
    {

    }

    public Position(
        Float latitude,
        Float longitude
    )
    {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    // getters and setters

    // latitude

    public Float getLatitude()
    {
        return latitude;
    }


    public void setLatitude(Float latitude)
    {
        this.latitude = latitude;
    }

    // longitude

    public Float getLongitude()
    {
        return longitude;
    }


    public void setLongitude(Float longitude)
    {
        this.longitude = longitude;
    }

    // bearing

    public Float getBearing()
    {
        return bearing;
    }


    public void setBearing(Float bearing)
    {
        this.bearing = bearing;
    }

    // odometer

    public Double getOdometer()
    {
        return odometer;
    }


    public void setOdometer(Double odometer)
    {
        this.odometer = odometer;
    }

    // speed

    public Float getSpeed()
    {
        return speed;
    }


    public void setSpeed(Float speed)
    {
        this.speed = speed;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final Position that = (Position) obj;
        return
                Objects.equals(this.latitude, that.latitude) &&
                Objects.equals(this.longitude, that.longitude) &&
                Objects.equals(this.bearing, that.bearing) &&
                Objects.equals(this.odometer, that.odometer) &&
                Objects.equals(this.speed, that.speed);
    }

    @Override
    public int hashCode() {
        return Objects.hash(latitude, longitude, bearing, odometer, speed);
    }

    @Override
    public String toString() {
        return "Position{" +
                    "latitude=" + latitude +
                    ", longitude=" + longitude +
                    ", bearing=" + bearing +
                    ", odometer=" + odometer +
                    ", speed=" + speed +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Position> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Position newMessage()
    {
        return new Position();
    }

    public Class<Position> typeClass()
    {
        return Position.class;
    }

    public String messageName()
    {
        return Position.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Position.class.getName();
    }

    public boolean isInitialized(Position message)
    {
        return 
            message.latitude != null 
            && message.longitude != null;
    }

    public void mergeFrom(Input input, Position message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.latitude = input.readFloat();
                    break;
                case 2:
                    message.longitude = input.readFloat();
                    break;
                case 3:
                    message.bearing = input.readFloat();
                    break;
                case 4:
                    message.odometer = input.readDouble();
                    break;
                case 5:
                    message.speed = input.readFloat();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Position message) throws IOException
    {
        if(message.latitude == null)
            throw new UninitializedMessageException(message);
        output.writeFloat(1, message.latitude, false);

        if(message.longitude == null)
            throw new UninitializedMessageException(message);
        output.writeFloat(2, message.longitude, false);

        if(message.bearing != null)
            output.writeFloat(3, message.bearing, false);

        if(message.odometer != null)
            output.writeDouble(4, message.odometer, false);

        if(message.speed != null)
            output.writeFloat(5, message.speed, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
